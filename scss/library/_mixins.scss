
// :: Functions
//--------------------------------------------

// Converts a number to its word form

@function convert-number-to-word($num) {
    $count:1;
    @each $word in one,two,three,four,five,six,seven,eight,nine,ten,eleven,
        twelve,thirteen,fourteen,fifteen,sixteen,seventeen,eighteen,nineteen,
        twenty,twentyone,twentytwo,twentythree,twentyfour{
        @if ($count == $num) { @return $word; }
        $count: $count + 1;
    }
    @return "invalid";
}

// Grid Calculation for Percentages

@function gridCalc($colNumber, $totalColumns) {
    @return percentage(($colNumber / $totalColumns));
}

// :: Mixins
//--------------------------------------------

// The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/

@mixin clearfix() { *zoom:1;
    &:before, &:after { content: ""; display: table; }
    &:after { clear: both; }
}

@mixin mobileClearfix() {
    @include respondTo(smallScreen) { &:before, &:after { content: ""; display: table; }
        &:after { clear: both; }
        &:last-child { float: none; }
    }
}

// Create CSS Triangles in a Breeze

@mixin cssTriangle($triangleSize, $triangleColor, $triangleDirection) {
    content: "";
    display: block;
    width: 0;
    height: 0;
    border: solid $triangleSize;
    @if ($triangleDirection == top) {
        border-color: $triangleColor transparent transparent transparent;
    }
    @if ($triangleDirection == bottom) {
        border-color: transparent transparent $triangleColor transparent;
    }
    @if ($triangleDirection == left) {
        border-color: transparent transparent transparent $triangleColor;
    }
    @if ($triangleDirection == right) {
        border-color: transparent $triangleColor transparent transparent;
    }
    // .example { @include css-triangle(5px, #fff, bottom); }
}

// Font size mixin to include px and rem

@mixin font-size($size, $is-important: false) {
    $size: if(unitless($size), $size, $size / 1px);

    @if $is-important {
        font-size: $size + px !important;
        font-size: ($size / 10) + rem !important;
    } @else {
        font-size: $size + px;
        font-size: ($size / 10) + rem;
    }
}

// Mixin for Semantic Grid reponsiveness

@mixin respondTo($media) {
    @if $media == smallScreen {
        @media only screen and (max-width: $screenSmall - 1) { @content; }
    } @else if $media == mediumScreen {
        @media only screen and (max-width: $screenMedium) and (min-width: $screenSmall) { @content; }
    } @else if $media == largeScreen {
        @media only screen and (min-width: $screenXlarge) { @content; }
    }
}


// :: Semantic Grid
//--------------------------------------------
// Inspired by https://github.com/twigkit/semantic.gs/blob/master/stylesheets/scss/grid.scss

// Outer row mixin for container rows

@mixin outerRow() { width: $rowWidth; max-width: 100%; min-width: $screenSmall; margin: 0 auto; @extend %clearfix; }

// Inner row mixin for nested rows, must be a child of an outer-row element. $behavior can be 'collapse' to get rid of margins

@mixin innerRowBase { width: auto; max-width: none; min-width: 0; }
@mixin innerRow($behavior: false) {
    @if $behavior == collapse { @extend %row-i-base; margin: 0; @extend %clearfix;
  } @else                     { @extend %row-i-base; margin: 0 (-($columnGutter/2)); @extend %clearfix; }
}

// Columns mixin, syntax is ($columns, $behavior). Behavior can be 'centered' which centers things or 'collapse' which collapses the gutters. ex @include row(4,[center | collapse])

@mixin columnBase { position: relative; min-height: 1px; padding: 0 ($columnGutter/2); }
@mixin column($columns:$columns, $behavior: false) {
    @if      $behavior == center   { @extend %fl-n; margin: 0 auto !important; @extend %c-base; width: gridCalc($columns, $totalColumns);
  } @else if $behavior == collapse { @extend %fl-l; @extend %c-base; padding: 0; width: gridCalc($columns, $totalColumns);
  } @else                          { @extend %fl-l; @extend %c-base; width: gridCalc($columns, $totalColumns); }
}

// Offset Mixin, include after a column mixin to manipulate its grid offset.

@mixin offsetBy($offset:1) { margin-left: gridCalc($offset, $totalColumns); }

// Push/Pull Mixins, include after a column mixin to manipulate stack ordering.

@mixin push($push:1) { left: gridCalc($push, $totalColumns); }
@mixin pull($push:1) { right: gridCalc($push, $totalColumns); }

// Mobile Row, synctax is @include mobile-row();

@mixin mobileRow() { @include respondTo(smallScreen) { width: auto; min-width: 0; margin-left: 0; margin-right: 0; @include clearfix(); } }

// Mobile Columns, syntax is @include mobile-column(#);

@mixin mobileColumn($columns:$columns, $behavior: false) {
    @if      $behavior == center   { @include respondTo(smallScreen) { float: none; margin: 0 auto; position: relative; min-height: 1px; padding: 0 ($columnGutter/2); width: gridCalc($columns, $mobileTotalColumns); }
  } @else if $behavior == collapse { @include respondTo(smallScreen) { float: left; position: relative; min-height: 1px; padding: 0; width: gridCalc($columns, $mobileTotalColumns); }
  } @else                          { @include respondTo(smallScreen) { float: left; width: gridCalc($columns, $mobileTotalColumns); padding: 0 ($columnGutter/2); } }
}

// Mobile Push/Pull Mixin

@mixin mobilePush($push:1) { @include respondTo(smallScreen) { left: gridCalc($push, $mobileTotalColumns); } }
@mixin mobilePull($push:1) { @include respondTo(smallScreen) { right: gridCalc($push, $mobileTotalColumns); } }

// Invisible Placeholder Classes for Grid
%fl-l { float: left; }
%fl-r { float: right; }
%fl-n { float: none; }

%clearfix { @include clearfix(); }
%clearfix-m { @include mobileClearfix(); }

%row-o { @include outerRow(); }
%row-i-base { @include innerRowBase(); }
%row-i { @include innerRow(); }

%c-base { @include columnBase(); }

@for $i from 1 through $totalColumns {
  .c-#{$i} { @include column($i); }
}
